
TypeConstructor:tc:

JumpPoint Lhc.JumpPoint.JumpPoint
Char      Lhc.Prim.Char
IO        Lhc.Prim.IO
World__   Lhc.Prim.World__
Bool      Lhc.Order.Bool
Target    Lhc.Options.Target
Ptr       Lhc.Addr.Ptr
Addr      Lhc.Addr.Addr
FunAddr   Lhc.Addr.FunAddr
Ratio     Lhc.Num.Ratio
Unit      Lhc.Basics.()
Float     Lhc.Float.Float
Double    Lhc.Float.Double
CLong     Foreign.C.Types.CLong
CSChar    Foreign.C.Types.CSChar
CUChar    Foreign.C.Types.CUChar
CUShort   Foreign.C.Types.CUShort
CULong    Foreign.C.Types.CULong

Bits1      Lhc.Types.Bits1_
Bits8      Lhc.Types.Bits8_
Bits16     Lhc.Types.Bits16_
Bits32     Lhc.Types.Bits32_
Bits64     Lhc.Types.Bits64_
Bits128    Lhc.Types.Bits128_
BitsPtr    Lhc.Types.BitsPtr_
BitsMax    Lhc.Types.BitsMax_

Float32    Lhc.Types.Float32_
Float64    Lhc.Types.Float64_
Float80    Lhc.Types.Float80_
Float128   Lhc.Types.Float128_

DataConstructor:dc:

Rational   Lhc.Num.:%
Cons       Lhc.Prim.:
EmptyList  Lhc.Prim.[]
Unit       Lhc.Basics.()
Boolzh     Lhc.Order.Bool#
Target     Lhc.Options.Target#
Char       Lhc.Prim.Char
Addr       Lhc.Addr.Addr

ClassName:class:
Eq              Lhc.Order.Eq
Ord             Lhc.Order.Ord
Enum            Lhc.Enum.Enum
Bounded         Lhc.Enum.Bounded
Show            Lhc.Show.Show
Read            Lhc.Text.Read
Ix              Data.Ix.Ix
Functor         Lhc.Monad.Functor
Monad           Lhc.Monad.Monad
Num             Lhc.Num.Num
Real            Lhc.Num.Real
Integral	Lhc.Num.Integral
Fractional	Lhc.Num.Fractional
Floating	Lhc.Float.Floating
RealFrac	Lhc.Float.RealFrac
RealFloat	Lhc.Float.RealFloat

RawType:rt:

bits128         bits128
bool            bool
float32         fbits32
float64         fbits64
float80         fbits80
float128        fbits128

Val:v:
eqString         Lhc.String.eqString
eqUnpackedString Lhc.String.eqUnpackedString
unpackString     Lhc.String.unpackString
target           Lhc.Options.target
error            Lhc.IO.error
minBound         Lhc.Enum.minBound
maxBound         Lhc.Enum.maxBound
fail             Lhc.Monad.fail
map              Lhc.Basics.map
and              Lhc.Order.&&
filter           Lhc.List.filter
foldr            Lhc.Basics.foldr
undefined        Lhc.Basics.undefined


bind                 Lhc.Monad.>>=
bind_                Lhc.Monad.>>
return               Lhc.Monad.return
concatMap            Lhc.Basics.concatMap
fromInteger          Lhc.Num.fromInteger
fromInt              Lhc.Num.fromInt
fromRational         Lhc.Num.fromRational
negate               Lhc.Num.negate
leq                  Lhc.Order.<=
geq                  Lhc.Order.>=
lt                   Lhc.Order.<
gt                   Lhc.Order.>
compare              Lhc.Order.compare
equals               Lhc.Order.==
neq                  Lhc.Order./=
fromEnum             Lhc.Enum.fromEnum
toEnum               Lhc.Enum.toEnum
enumFrom             Lhc.Enum.enumFrom
enumFromTo           Lhc.Enum.enumFromTo
enumFromThenTo       Lhc.Enum.enumFromThenTo
enumFromThen         Lhc.Enum.enumFromThen
succ                 Lhc.Enum.succ
pred                 Lhc.Enum.pred
range                Data.Ix.range
index                Data.Ix.index
inRange              Data.Ix.inRange
runExpr              Prelude.IO.runExpr
runRaw               Lhc.Prim.runRaw
runMain              Lhc.IO.runMain
runNoWrapper         Lhc.Prim.runNoWrapper

enum_succ            Lhc.Inst.PrimEnum.enum_succ
enum_pred            Lhc.Inst.PrimEnum.enum_pred
enum_from            Lhc.Inst.PrimEnum.enum_from
enum_fromTo          Lhc.Inst.PrimEnum.enum_fromTo
enum_fromThen        Lhc.Inst.PrimEnum.enum_fromThen
enum_fromThenTo      Lhc.Inst.PrimEnum.enum_fromThenTo
enum_toEnum          Lhc.Inst.PrimEnum.enum_toEnum
